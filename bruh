-- Gui to Lua
-- Version: 3.2

-- Instances:

local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local LegChestEnable = Instance.new("TextButton")
local UICorner = Instance.new("UICorner")
local UICorner_2 = Instance.new("UICorner")
local WALKSPEED = Instance.new("TextButton")
local UICorner_3 = Instance.new("UICorner")
local INFJUMP = Instance.new("TextButton")
local UICorner_4 = Instance.new("UICorner")
local POTATOGRAPHICS = Instance.new("TextButton")
local UICorner_5 = Instance.new("UICorner")
local PLAYERESP = Instance.new("TextButton")
local UICorner_6 = Instance.new("UICorner")

--Properties:

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(71, 71, 71)
Frame.Position = UDim2.new(0.139307246, 0, 0.115131579, 0)
Frame.Size = UDim2.new(0, 477, 0, 221)

LegChestEnable.Name = "LegChestEnable"
LegChestEnable.Parent = Frame
LegChestEnable.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
LegChestEnable.Position = UDim2.new(0.465408802, 0, 0.085972853, 0)
LegChestEnable.Size = UDim2.new(0, 200, 0, 50)
LegChestEnable.Font = Enum.Font.SourceSans
LegChestEnable.Text = "CHEST ESP (LEG)"
LegChestEnable.TextColor3 = Color3.fromRGB(0, 0, 0)
LegChestEnable.TextScaled = true
LegChestEnable.TextSize = 14.000
LegChestEnable.TextWrapped = true

UICorner.Parent = LegChestEnable

UICorner_2.Parent = Frame

WALKSPEED.Name = "WALKSPEED"
WALKSPEED.Parent = Frame
WALKSPEED.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
WALKSPEED.Position = UDim2.new(0, 0, 0.443438917, 0)
WALKSPEED.Size = UDim2.new(0, 200, 0, 50)
WALKSPEED.Font = Enum.Font.SourceSans
WALKSPEED.Text = "WALKSPEEDF"
WALKSPEED.TextColor3 = Color3.fromRGB(0, 0, 0)
WALKSPEED.TextScaled = true
WALKSPEED.TextSize = 14.000
WALKSPEED.TextWrapped = true

UICorner_3.Parent = WALKSPEED

INFJUMP.Name = "INFJUMP"
INFJUMP.Parent = Frame
INFJUMP.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
INFJUMP.Position = UDim2.new(-1.86264515e-08, 0, 0.0859728456, 0)
INFJUMP.Size = UDim2.new(0, 200, 0, 50)
INFJUMP.Font = Enum.Font.SourceSans
INFJUMP.Text = "INF JUMP"
INFJUMP.TextColor3 = Color3.fromRGB(0, 0, 0)
INFJUMP.TextScaled = true
INFJUMP.TextSize = 14.000
INFJUMP.TextWrapped = true

UICorner_4.Parent = INFJUMP

POTATOGRAPHICS.Name = "POTATOGRAPHICS"
POTATOGRAPHICS.Parent = Frame
POTATOGRAPHICS.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
POTATOGRAPHICS.Position = UDim2.new(0.507337511, 0, 0.76018101, 0)
POTATOGRAPHICS.Size = UDim2.new(0, 160, 0, 38)
POTATOGRAPHICS.Font = Enum.Font.SourceSans
POTATOGRAPHICS.Text = "POTATO"
POTATOGRAPHICS.TextColor3 = Color3.fromRGB(0, 0, 0)
POTATOGRAPHICS.TextScaled = true
POTATOGRAPHICS.TextSize = 14.000
POTATOGRAPHICS.TextWrapped = true

UICorner_5.Parent = POTATOGRAPHICS

PLAYERESP.Name = "PLAYER ESP"
PLAYERESP.Parent = Frame
PLAYERESP.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
PLAYERESP.Position = UDim2.new(0.0419287086, 0, 0.76018101, 0)
PLAYERESP.Size = UDim2.new(0, 160, 0, 38)
PLAYERESP.Font = Enum.Font.SourceSans
PLAYERESP.Text = "PLAYER ESP"
PLAYERESP.TextColor3 = Color3.fromRGB(0, 0, 0)
PLAYERESP.TextScaled = true
PLAYERESP.TextSize = 14.000
PLAYERESP.TextWrapped = true

UICorner_6.Parent = PLAYERESP

-- Scripts:

local function NCWRHFF_fake_script() -- LegChestEnable.LocalScript 
	local script = Instance.new('LocalScript', LegChestEnable)

	local btn = script.Parent
	btn.MouseButton1Click:Connect(function()
	print("LEG CHEST ESP ENABLED.")
		local EspFolder2 = Instance.new("Folder",game.CoreGui)
		EspFolder2.Name = "ChestEspFolder"
		modelsWithEsp = {} 
		while wait() do
			wait()
			for i,v in pairs(game:GetService("Workspace").Effects:GetChildren()) do
				if v.ClassName == "Model" and not modelsWithEsp[v] then 
					local Chest = v:FindFirstChildOfClass("MeshPart")
					if Chest and Chest.MeshId == "rbxassetid://10798559852" then
						local esp = Instance.new("BoxHandleAdornment",EspFolder2)
						esp.Adornee = v
						esp.ZIndex = 0
						esp.Size = Vector3.new(4, 5, 1)
						esp.Transparency = 0.65
						esp.Color3 = Color3.fromRGB(255, 35, 244)
						esp.AlwaysOnTop = true
						esp.Name = "EspBox"
						modelsWithEsp[v] = true 
					end
				end
			end
		end
	end)
end
coroutine.wrap(NCWRHFF_fake_script)()
local function TPTRE_fake_script() -- WALKSPEED.LocalScript 
	local script = Instance.new('LocalScript', WALKSPEED)

	local e = script.Parent
	
	e.MouseButton1Click:Connect(function()
	print("WALKSPEED ENABLED.")
		local Player = game:GetService'Players'.LocalPlayer;
		local UIS = game:GetService'UserInputService';
		UIS.InputBegan:connect(function(UserInput)
			if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.LeftShift then
				_G.Running = true
				while wait(0.005) and _G.Running == true do
					game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.lookVector * 1.25
				end
			end
		end)
	
		UIS.InputEnded:connect(function(UserInput)
			if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.LeftShift then
				_G.Running = false
	
			end
		end)
	
	end)
	
end
coroutine.wrap(TPTRE_fake_script)()
local function RGQCNH_fake_script() -- INFJUMP.LocalScript 
	local script = Instance.new('LocalScript', INFJUMP)

	local inf = script.Parent
	inf.MouseButton1Click:Connect(function()
		print("INFJUMP ENABLED")
		local Player = game:GetService'Players'.LocalPlayer;
		local UIS = game:GetService'UserInputService';
	
		_G.JumpHeight = 50;
	
		function Action(Object, Function) if Object ~= nil then Function(Object); end end
	
		UIS.InputBegan:connect(function(UserInput)
			if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space then
				Action(Player.Character.Humanoid, function(self)
					if self:GetState() == Enum.HumanoidStateType.Jumping or self:GetState() == Enum.HumanoidStateType.Freefall then
						Action(self.Parent.HumanoidRootPart, function(self)
							self.Velocity = Vector3.new(0, _G.JumpHeight, 0);
						end)
					end
				end)
			end
		end)
	
	
	end)
end
coroutine.wrap(RGQCNH_fake_script)()
local function TLHHDQK_fake_script() -- POTATOGRAPHICS.LocalScript 
	local script = Instance.new('LocalScript', POTATOGRAPHICS)

	local btn = script.Parent
	btn.MouseButton1Click:Connect(function()
	
	print("POTATO ENABLED")
	local decalsyeeted = true
	local g = game
	local w = g.Workspace
	local l = g.Lighting
	local t = w.Terrain
	t.WaterWaveSize = 0
	t.WaterWaveSpeed = 0
	t.WaterReflectance = 0
	t.WaterTransparency = 0
	l.GlobalShadows = false
	l.FogEnd = 9e9
	l.Brightness = 0
	settings().Rendering.QualityLevel = "Level01"
	for i, v in pairs(g:GetDescendants()) do
		if v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
			v.Material = "Plastic"
			v.Reflectance = 0
		elseif v:IsA("Decal") or v:IsA("Texture") and decalsyeeted then
			v.Transparency = 1
		elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
			v.Lifetime = NumberRange.new(0)
		elseif v:IsA("Explosion") then
			v.BlastPressure = 1
			v.BlastRadius = 1
		elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") then
			v.Enabled = false
		elseif v:IsA("MeshPart") then
			v.Material = "Plastic"
			v.Reflectance = 0
			v.TextureID = 10385902758728957
		end
	end
	for i, e in pairs(l:GetChildren()) do
		if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
			e.Enabled = false
		end
		end
		end)
end
coroutine.wrap(TLHHDQK_fake_script)()
local function SOIJEHX_fake_script() -- PLAYERESP.LocalScript 
	local script = Instance.new('LocalScript', PLAYERESP)

	local ESP = {
		Enabled = true,
		Boxes = true,
		BoxShift = CFrame.new(0,-1.5,0),
		BoxSize = Vector3.new(4,6,0),
		Color = Color3.fromRGB(255, 170, 0),
		FaceCamera = false,
		Names = true,
		TeamColor = true,
		Thickness = 0.5,
		AttachShift = 1,
		TeamMates = true,
		Players = true,
	
		Objects = setmetatable({}, {__mode="kv"}),
		Overrides = {}
	}
	
	--Declarations--
	local cam = workspace.CurrentCamera
	local plrs = game:GetService("Players")
	local plr = plrs.LocalPlayer
	local mouse = plr:GetMouse()
	
	local V3new = Vector3.new
	local WorldToViewportPoint = cam.WorldToViewportPoint
	
	--Functions--
	local function Draw(obj, props)
		local new = Drawing.new(obj)
	
		props = props or {}
		for i,v in pairs(props) do
			new[i] = v
		end
		return new
	end
	
	function ESP:GetTeam(p)
		local ov = self.Overrides.GetTeam
		if ov then
			return ov(p)
		end
	
		return p and p.Team
	end
	
	function ESP:IsTeamMate(p)
		local ov = self.Overrides.IsTeamMate
		if ov then
			return ov(p)
		end
	
		return self:GetTeam(p) == self:GetTeam(plr)
	end
	
	function ESP:GetColor(obj)
		local ov = self.Overrides.GetColor
		if ov then
			return ov(obj)
		end
		local p = self:GetPlrFromChar(obj)
		return p and self.TeamColor and p.Team and p.Team.TeamColor.Color or self.Color
	end
	
	function ESP:GetPlrFromChar(char)
		local ov = self.Overrides.GetPlrFromChar
		if ov then
			return ov(char)
		end
	
		return plrs:GetPlayerFromCharacter(char)
	end
	
	function ESP:Toggle(bool)
		self.Enabled = bool
		if not bool then
			for i,v in pairs(self.Objects) do
				if v.Type == "Box" then --fov circle etc
					if v.Temporary then
						v:Remove()
					else
						for i,v in pairs(v.Components) do
							v.Visible = false
						end
					end
				end
			end
		end
	end
	
	function ESP:GetBox(obj)
		return self.Objects[obj]
	end
	
	function ESP:AddObjectListener(parent, options)
		local function NewListener(c)
			if type(options.Type) == "string" and c:IsA(options.Type) or options.Type == nil then
				if type(options.Name) == "string" and c.Name == options.Name or options.Name == nil then
					if not options.Validator or options.Validator(c) then
						local box = ESP:Add(c, {
							PrimaryPart = type(options.PrimaryPart) == "string" and c:WaitForChild(options.PrimaryPart) or type(options.PrimaryPart) == "function" and options.PrimaryPart(c),
							Color = type(options.Color) == "function" and options.Color(c) or options.Color,
							ColorDynamic = options.ColorDynamic,
							Name = type(options.CustomName) == "function" and options.CustomName(c) or options.CustomName,
							IsEnabled = options.IsEnabled,
							RenderInNil = options.RenderInNil
						})
						--TODO: add a better way of passing options
						if options.OnAdded then
							coroutine.wrap(options.OnAdded)(box)
						end
					end
				end
			end
		end
	
		if options.Recursive then
			parent.DescendantAdded:Connect(NewListener)
			for i,v in pairs(parent:GetDescendants()) do
				coroutine.wrap(NewListener)(v)
			end
		else
			parent.ChildAdded:Connect(NewListener)
			for i,v in pairs(parent:GetChildren()) do
				coroutine.wrap(NewListener)(v)
			end
		end
	end
	
	local boxBase = {}
	boxBase.__index = boxBase
	
	function boxBase:Remove()
		ESP.Objects[self.Object] = nil
		for i,v in pairs(self.Components) do
			v.Visible = false
			v:Remove()
			self.Components[i] = nil
		end
	end
	
	function boxBase:Update()
		if not self.PrimaryPart then
			--warn("not supposed to print", self.Object)
			return self:Remove()
		end
	
		local color
		if ESP.Highlighted == self.Object then
			color = ESP.HighlightColor
		else
			color = self.Color or self.ColorDynamic and self:ColorDynamic() or ESP:GetColor(self.Object) or ESP.Color
		end
	
		local allow = true
		if ESP.Overrides.UpdateAllow and not ESP.Overrides.UpdateAllow(self) then
			allow = false
		end
		if self.Player and not ESP.TeamMates and ESP:IsTeamMate(self.Player) then
			allow = false
		end
		if self.Player and not ESP.Players then
			allow = false
		end
		if self.IsEnabled and (type(self.IsEnabled) == "string" and not ESP[self.IsEnabled] or type(self.IsEnabled) == "function" and not self:IsEnabled()) then
			allow = false
		end
		if not workspace:IsAncestorOf(self.PrimaryPart) and not self.RenderInNil then
			allow = false
		end
	
		if not allow then
			for i,v in pairs(self.Components) do
				v.Visible = false
			end
			return
		end
	
		if ESP.Highlighted == self.Object then
			color = ESP.HighlightColor
		end
	
		--calculations--
		local cf = self.PrimaryPart.CFrame
		if ESP.FaceCamera then
			cf = CFrame.new(cf.p, cam.CFrame.p)
		end
		local size = self.Size
		local locs = {
			TopLeft = cf * ESP.BoxShift * CFrame.new(size.X/2,size.Y/2,0),
			TopRight = cf * ESP.BoxShift * CFrame.new(-size.X/2,size.Y/2,0),
			BottomLeft = cf * ESP.BoxShift * CFrame.new(size.X/2,-size.Y/2,0),
			BottomRight = cf * ESP.BoxShift * CFrame.new(-size.X/2,-size.Y/2,0),
			TagPos = cf * ESP.BoxShift * CFrame.new(0,size.Y/2,0),
			Torso = cf * ESP.BoxShift
		}
	
		if ESP.Boxes then
			local TopLeft, Vis1 = WorldToViewportPoint(cam, locs.TopLeft.p)
			local TopRight, Vis2 = WorldToViewportPoint(cam, locs.TopRight.p)
			local BottomLeft, Vis3 = WorldToViewportPoint(cam, locs.BottomLeft.p)
			local BottomRight, Vis4 = WorldToViewportPoint(cam, locs.BottomRight.p)
	
			if self.Components.Quad then
				if Vis1 or Vis2 or Vis3 or Vis4 then
					self.Components.Quad.Visible = true
					self.Components.Quad.PointA = Vector2.new(TopRight.X, TopRight.Y)
					self.Components.Quad.PointB = Vector2.new(TopLeft.X, TopLeft.Y)
					self.Components.Quad.PointC = Vector2.new(BottomLeft.X, BottomLeft.Y)
					self.Components.Quad.PointD = Vector2.new(BottomRight.X, BottomRight.Y)
					self.Components.Quad.Color = color
				else
					self.Components.Quad.Visible = false
				end
			end
		else
			self.Components.Quad.Visible = false
		end
	
		if ESP.Names then
			local TagPos, Vis5 = WorldToViewportPoint(cam, locs.TagPos.p)
	
			if Vis5 then
				self.Components.Name.Visible = true
				self.Components.Name.Position = Vector2.new(TagPos.X, TagPos.Y)
				self.Components.Name.Text = self.Name
				self.Components.Name.Color = color
	
				self.Components.Distance.Visible = true
				self.Components.Distance.Position = Vector2.new(TagPos.X, TagPos.Y + 14)
				self.Components.Distance.Text = math.floor((cam.CFrame.p - cf.p).magnitude) .."m away"
				self.Components.Distance.Color = color
			else
				self.Components.Name.Visible = false
				self.Components.Distance.Visible = false
			end
		else
			self.Components.Name.Visible = false
			self.Components.Distance.Visible = false
		end
	
		if ESP.Tracers then
			local TorsoPos, Vis6 = WorldToViewportPoint(cam, locs.Torso.p)
	
			if Vis6 then
				self.Components.Tracer.Visible = true
				self.Components.Tracer.From = Vector2.new(TorsoPos.X, TorsoPos.Y)
				self.Components.Tracer.To = Vector2.new(cam.ViewportSize.X/2,cam.ViewportSize.Y/ESP.AttachShift)
				self.Components.Tracer.Color = color
			else
				self.Components.Tracer.Visible = false
			end
		else
			self.Components.Tracer.Visible = false
		end
	end
	
	function ESP:Add(obj, options)
		if not obj.Parent and not options.RenderInNil then
			return warn(obj, "has no parent")
		end
	
		local box = setmetatable({
			Name = options.Name or obj.Name,
			Type = "Box",
			Color = options.Color --[[or self:GetColor(obj)]],
			Size = options.Size or self.BoxSize,
			Object = obj,
			Player = options.Player or plrs:GetPlayerFromCharacter(obj),
			PrimaryPart = options.PrimaryPart or obj.ClassName == "Model" and (obj.PrimaryPart or obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChildWhichIsA("BasePart")) or obj:IsA("BasePart") and obj,
			Components = {},
			IsEnabled = options.IsEnabled,
			Temporary = options.Temporary,
			ColorDynamic = options.ColorDynamic,
			RenderInNil = options.RenderInNil
		}, boxBase)
	
		if self:GetBox(obj) then
			self:GetBox(obj):Remove()
		end
	
		box.Components["Quad"] = Draw("Quad", {
			Thickness = self.Thickness,
			Color = color,
			Transparency = 1,
			Filled = false,
			Visible = self.Enabled and self.Boxes
		})
		box.Components["Name"] = Draw("Text", {
			Text = box.Name,
			Color = box.Color,
			Center = true,
			Outline = true,
			Size = 19,
			Visible = self.Enabled and self.Names
		})
		box.Components["Distance"] = Draw("Text", {
			Color = box.Color,
			Center = true,
			Outline = true,
			Size = 19,
			Visible = self.Enabled and self.Names
		})
	
		box.Components["Tracer"] = Draw("Line", {
			Thickness = ESP.Thickness,
			Color = box.Color,
			Transparency = 1,
			Visible = self.Enabled and self.Tracers
		})
		self.Objects[obj] = box
	
		obj.AncestryChanged:Connect(function(_, parent)
			if parent == nil and ESP.AutoRemove ~= false then
				box:Remove()
			end
		end)
		obj:GetPropertyChangedSignal("Parent"):Connect(function()
			if obj.Parent == nil and ESP.AutoRemove ~= false then
				box:Remove()
			end
		end)
	
		local hum = obj:FindFirstChildOfClass("Humanoid")
		if hum then
			hum.Died:Connect(function()
				if ESP.AutoRemove ~= false then
					box:Remove()
				end
			end)
		end
	
		return box
	end
	
	local function CharAdded(char)
		local p = plrs:GetPlayerFromCharacter(char)
		if not char:FindFirstChild("HumanoidRootPart") then
			local ev
			ev = char.ChildAdded:Connect(function(c)
				if c.Name == "HumanoidRootPart" then
					ev:Disconnect()
					ESP:Add(char, {
						Name = p.Name,
						Player = p,
						PrimaryPart = c
					})
				end
			end)
		else
			ESP:Add(char, {
				Name = p.Name,
				Player = p,
				PrimaryPart = char.HumanoidRootPart
			})
		end
	end
	local function PlayerAdded(p)
		p.CharacterAdded:Connect(CharAdded)
		if p.Character then
			coroutine.wrap(CharAdded)(p.Character)
		end
	end
	plrs.PlayerAdded:Connect(PlayerAdded)
	for i,v in pairs(plrs:GetPlayers()) do
		if v ~= plr then
			PlayerAdded(v)
		end
	end
	
	game:GetService("RunService").RenderStepped:Connect(function()
		cam = workspace.CurrentCamera
		for i,v in (ESP.Enabled and pairs or ipairs)(ESP.Objects) do
			if v.Update then
				local s,e = pcall(v.Update, v)
				if not s then warn("[EU]", e, v.Object:GetFullName()) end
			end
		end
	end)
	
	return ESP
end
coroutine.wrap(SOIJEHX_fake_script)()
local function AOPG_fake_script() -- Frame.LocalScript 
	local script = Instance.new('LocalScript', Frame)

	script.Parent.Active = true
	script.Parent.Draggable = true
	
	
end
coroutine.wrap(AOPG_fake_script)()
